{"ts":1360870636717,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360870672383,"patch":[[{"diffs":[[1,"var spawn = require('child_process').spawn;\r\nvar fs = require('fs');\r\n\r\nvar Image = function Image(document) {\r\n    this.objects = document ? [document] : [];\r\n }\r\n\r\nImage.prototype.convert = function(callback, filename) {    \r\n  var cmdOptions = []; \r\n  cmdOptions = cmdOptions.concat(buildCmdOptions(this.objects[0], filename));\r\n  //var wkhtmltoimage_path = process.env.PORT ? './bin/wkhtmltoimage-amd64' : 'wkhtmltoimage';\r\n  var wkhtmltoimage_path = process.env.PORT ? './bin/wkhtmltoimage' : 'wkhtmltoimage';\r\n\r\n  var convert = spawn(wkhtmltoimage_path,cmdOptions); \r\n  \r\n  //take care of direct stdin html\r\n  if (this.objects[0].html) {\r\n    var inputHTML = spawn (\"echo\",this.objects[0].html);\r\n    inputHTML.stdout.on('data', function (data) {\r\n        convert.stdin.write(data);\r\n    });\r\n    inputHTML.on ('exit', function () {\r\n        convert.stdin.end();\r\n    });\r\n  }\r\n\r\n  var image = [];\r\n  var err;\r\n\r\n  convert.stdout.on('data', function (data) {\r\n      image.push(data);\r\n  });\r\n\r\n  convert.stderr.on('data', function (data) {\r\n      err += data;\r\n  });\r\n\r\n  convert.on ('exit', function (code) {\r\n      if (code) {\r\n        console.log ('child process exited with code ' + code);\r\n      } else { \r\n      \r\n        if(!filename) {\r\n          //combine the buffers\r\n          var size = 0;\r\n          for (var i=0; i < image.length; ++i) {\r\n            size+= image[0].length;\r\n          }\r\n          var combinedBuffer = new Buffer (size);\r\n          var pos = 0;\r\n          for (var i=0; i < image.length; ++i) {\r\n            if (pos > size) {\r\n              break;\r\n            }\r\n            image[i].copy(combinedBuffer, pos, 0, image[i].length);\r\n            pos += image[i].length;\r\n          }\r\n\r\n          callback (err, combinedBuffer);\r\n        } else {\r\n          callback (err);\r\n        }\r\n      }\r\n  });\r\n}\r\n\r\n//take global options and make them into an array\r\nvar buildOptions = function(options) {\r\n  var commandOptions = [];\r\n  for (name in options) {\r\n    if (options.hasOwnProperty(name)) {\r\n      commandOptions.push(name);\r\n    }\r\n  }\r\n  return commandOptions;\r\n};\r\n\r\n//build the essential options for the wkhtmltoimage command\r\nvar buildCmdOptions = function (objects, filename) {\r\n  //wkhtml options\r\n  var cmdOptions = [];\r\n  if (objects.options) {\r\n    cmdOptions = buildOptions(objects.options);\r\n  }\r\n\r\n  //input source\r\n  if (objects.html) {\r\n    cmdOptions.push('-');\r\n  } else if (objects.filename) {\r\n    cmdOptions.push(objects.filename);\r\n  } else {\r\n    cmdOptions.push(objects.url);\r\n  }\r\n\r\n  //output\r\n  if (filename) {\r\n    cmdOptions.push(filename);\r\n  } else {\r\n    cmdOptions.push('-');\r\n  }\r\n    \r\n  return cmdOptions;\r\n};\r\n\r\nmodule.exports.createImage = function (request, response, callback) {\r\n  var theURL = request.session.url ? request.session.url : \"http://www.google.com\";\r\n  new Image({ url: theURL }).convert (function (err, data) {\r\n      if (err)\r\n        console.log (err);\r\n      if (data) {\r\n        //see if we have a callback function\r\n        if (callback) {\r\n          callback (data, request, response); \r\n        } else {\r\n          response.writeHead(200, {'Content-Type' : 'image/png',\r\n                                   'Content-Size' : data.length }); \r\n          response.write(data);\r\n          response.end ();\r\n        }\r\n      } else {\r\n        fs.createReadStream('./image_error.html').pipe(response);\r\n      }\r\n  });\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3412}]],"length":3412,"saved":false}
{"ts":1360870692005,"patch":[[{"diffs":[[0,"if (err)"],[1," {"],[0,"\r\n      "]],"start1":2910,"start2":2910,"length1":16,"length2":18},{"diffs":[[0,"sole.log"],[-1," "],[0,"(err);\r\n"],[1,"      }\r\n"],[0,"      if"]],"start1":2933,"start2":2933,"length1":25,"length2":33}]],"length":3422,"saved":false}
{"ts":1360871519926,"patch":[[{"diffs":[[0,"\r\n};\r\n\r\n"],[1,"module.exports.getImage = function (request, response, callback) {\r\n  var theURL = request.session.url ? request.session.url : \"http://www.google.com\";\r\n  new Image({ url: theURL }).convert (function (err, data) {\r\n      if (err) {\r\n        console.log(err);\r\n      }\r\n      if (data) {\r\n        //see if we have a callback function\r\n        if (callback) {\r\n          callback (data, request, response); \r\n        } else {\r\n          response.writeHead(200, {'Content-Type' : 'image/png',\r\n                                   'Content-Size' : data.length }); \r\n          response.write(data);\r\n          response.end ();\r\n        }\r\n      } else {\r\n        fs.createReadStream('./image_error.html').pipe(response);\r\n      }\r\n  });\r\n}\r\n\r\n"],[0,"module.e"]],"start1":2678,"start2":2678,"length1":16,"length2":753}]],"length":4159,"saved":false}
{"ts":1360872654498,"patch":[[{"diffs":[[0,"ltoimage"],[1,"-i396"],[0,"' : 'wkh"]],"start1":486,"start2":486,"length1":16,"length2":21}]],"length":4164,"saved":false}
{"ts":1360874816871,"patch":[[{"diffs":[[0,"s');\r\n\r\n"],[1,"//"],[0,"var Imag"]],"start1":64,"start2":64,"length1":16,"length2":18},{"diffs":[[0,"ocument) {\r\n"],[1,"module.exports.Image = function Image(document) {\r\n"],[0,"    this.obj"]],"start1":102,"start2":102,"length1":24,"length2":75}]],"length":4217,"saved":false}
